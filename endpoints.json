{
  "/api": {
    "GET": {
      "responds": "endpoints JSON object"
    }
  },
  "/api/topics": {
    "GET": {
      "responds": "array of topic objects containing slug and description properties"
    },
    "POST": {
      "accepts": "topic object containing unique slug and description",
      "responds": "posted topic object"
    }
  },
  "/api/articles": {
    "GET": {
      "accepts": "queries of author, topic, sort_by(default - date), order (default - desc), limit (default - 10) and p (stands for page at which to start - calculated using limit) - multiple queries can be given",
      "responds": "array of article objects containing author (username from users table), title, article_id, topic, created_at, votes, comment count and article count (total count of filtered articles, discounting limit)"
    },
    "POST": {
      "accepts": "article object containing title, body, topic, username",
      "responds": "posted article object"
    }
  },
  "/api/articles/:article_id": {
    "GET ": {
      "responds": "article object containing author (username from user table), title, article_id, body, topic, created_at, votes, comment_count"
    },
    "PATCH": {
      "accepts": "object in form { inc_votes: newVote } where newVote indicates how much the votes property in the database should be updated by",
      "responds": "updated article"
    },
    "DELETE": {
      "responds": "status 204 and no content if deletes given article"
    }
  },
  "/api/articles/:article_id/comments": {
    "GET": {
      "accepts": "queries sort_by (default - date), order (default - desc), limit (default - 10) and p (stands for page at which to start - calculated using limit)",
      "responds": "array of comment objects for the given article containing comment_id, votes, created_at, author (username from users table) and body"
    },
    "POST": {
      "accepts": "comment object containing username and body",
      "responds": "posted comment article"
    }
  },
  "/api/comments/:comment_id": {
    "PATCH": {
      "accepts": "object in form { inc_votes: newVote } where newVote indicates how much the votes property in the database should be updated by",
      "responds": "updated comment" 
    },
    "DELETE": {
      "responds": "status 204 and no content if deletes given comment"
    }
  },
  "/api/users": {
    "GET": {
      "responds": "array of user objects containing username, avatar_url and name"
    },
    "POST": {
      "accepts": "object containing username, avatar_url and name",
      "responds": "posted user object"
    }
  },
  "/api/users/:username": {
    "GET": {
      "responds": "user object containing username, avatar_url, name"
    }
  }
}